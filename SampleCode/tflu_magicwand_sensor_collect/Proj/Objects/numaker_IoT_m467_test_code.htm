<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\numaker_IoT_m467_test_code.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\numaker_IoT_m467_test_code.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Nov  1 16:05:28 2023
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[4d]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[37]">ACMP23_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[42]">BMC_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[58]">BPWM0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[59]">BPWM1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[7a]">CANFD00_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[7b]">CANFD01_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[7c]">CANFD10_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[7d]">CANFD11_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[82]">CANFD20_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[83]">CANFD21_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[84]">CANFD30_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[85]">CANFD31_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[5b]">CCAP_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[e]">CKFAIL_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[51]">CRPT_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[4d]">Default_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[34]">EADC00_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[35]">EADC01_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[38]">EADC02_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[39]">EADC03_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[72]">EADC10_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[73]">EADC11_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[74]">EADC12_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[75]">EADC13_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[86]">EADC20_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[87]">EADC21_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[88]">EADC22_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[89]">EADC23_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[60]">ECAP0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[61]">ECAP1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[68]">ECAP2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[69]">ECAP3_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[66]">EHCI_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[53]">EINT6_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[63]">EINT7_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[4c]">EMAC0_IRQHandler</a> from main.o(.text.EMAC0_IRQHandler) referenced from startup_m460.o(RESET)
 <LI><a href="#[23]">EPWM0P0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[24]">EPWM0P1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[25]">EPWM0P2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[27]">EPWM1P0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[28]">EPWM1P1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[29]">EPWM1P2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[5e]">EQEI0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[5f]">EQEI1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[7e]">EQEI2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[7f]">EQEI3_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[52]">GPG_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[62]">GPH_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[78]">GPI_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[47]">GPJ_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[6b]">HBI_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[5c]">I2C2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[5d]">I2C3_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[80]">I2C4_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[4e]">I2S0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[4f]">I2S1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[f]">ISP_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[6a]">KPI_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[77]">KS_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[40]">OHCI_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[32]">PDMA0_IRQHandler</a> from audio.o(.text.PDMA0_IRQHandler) referenced from startup_m460.o(RESET)
 <LI><a href="#[6c]">PDMA1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[65]">PSIO_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[8c]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_m460.o(.text)
 <LI><a href="#[20]">QSPI0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[3c]">QSPI1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[44]">SC0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[45]">SC1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[46]">SC2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[4a]">SDH0_IRQHandler</a> from main.o(.text.SDH0_IRQHandler) referenced from startup_m460.o(RESET)
 <LI><a href="#[64]">SDH1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[81]">SPI10_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[48]">SPI3_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[49]">SPI4_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[43]">SPI5_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[50]">SPI6_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[57]">SPI7_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[76]">SPI8_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[79]">SPI9_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[5a]">SPIM_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_m460.o(RESET)
 <LI><a href="#[8a]">SystemInit</a> from system_m460.o(.text.SystemInit) referenced from startup_m460.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from main.o(.text.TMR0_IRQHandler) referenced from startup_m460.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[6f]">TRNG_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[3a]">UART2_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[3b]">UART3_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[55]">UART5_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[70]">UART6_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[71]">UART7_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[6d]">UART8_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[6e]">UART9_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[4b]">USBD20_IRQHandler</a> from hsusb_mouse.o(.text.USBD20_IRQHandler) referenced from startup_m460.o(RESET)
 <LI><a href="#[3f]">USBD_IRQHandler</a> from fsusb_mouse.o(.text.USBD_IRQHandler) referenced from startup_m460.o(RESET)
 <LI><a href="#[67]">USBOTG20_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[41]">USBOTG_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[56]">USCI0_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m460.o(.text) referenced from startup_m460.o(RESET)
 <LI><a href="#[8b]">__main</a> from __main.o(!!!main) referenced from startup_m460.o(.text)
 <LI><a href="#[8f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[8d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[8e]">fputc</a> from retarget.o(.text.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[92]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[93]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[19c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[94]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[db]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[96]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[98]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9a]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[19d]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[9e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a0]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a1]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[a4]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a6]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a8]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[ac]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[19e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[ae]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b0]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[b2]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[b4]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[19f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[c0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1b6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1b8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[91]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[bd]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bf]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MPU6500_test &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1be]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ACMP23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CANFD00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>CANFD01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>CANFD10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CANFD11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>CANFD20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>CANFD21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CANFD30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CANFD31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CCAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CRPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>EADC10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>EADC11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>EADC12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>EADC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>EADC20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>EADC21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>EADC22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>EADC23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ECAP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ECAP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EQEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EQEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EQEI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EQEI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPJ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>I2C4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ISP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>KPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>KS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>PDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>PSIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SPI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bf]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH0_IRQHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_test
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_readXYZ_mg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[ca]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1c0]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ce]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[cf]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cc]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[95]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[d2]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c9]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[d5]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[a7]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[d8]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[a3]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[ab]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[d9]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a5]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ad]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[97]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[d3]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ca]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c32rtomb
</UL>

<P><STRONG><a name="[d7]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d1]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e5]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[e6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[af]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[b1]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e7]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[b3]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[b5]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[e8]"></a>_c32rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c32rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[d6]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c32rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[be]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[e4]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[de]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[199]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[191]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ec]"></a>CLK_EnablePLL</STRONG> (Thumb, 554 bytes, Stack size 64 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[190]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ee]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
</UL>

<P><STRONG><a name="[11a]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, clk.o(.text.CLK_GetHXTFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_GetHXTFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
</UL>

<P><STRONG><a name="[f0]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>

<P><STRONG><a name="[f1]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>

<P><STRONG><a name="[11b]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[f2]"></a>CLK_SetCoreClock</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[f3]"></a>CLK_SetHCLK</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[192]"></a>CLK_SetModuleClock</STRONG> (Thumb, 796 bytes, Stack size 80 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ed]"></a>CLK_WaitClockReady</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[4c]"></a>EMAC0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.EMAC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EMAC0_IRQHandler &rArr; synopGMAC0_intr_handler &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>HSUSBD_CtrlIn</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, hsusbd.o(.text.HSUSBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_CtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HSUSBD_GetDescriptor</STRONG> (Thumb, 1142 bytes, Stack size 48 bytes, hsusbd.o(.text.HSUSBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HSUSBD_GetDescriptor &rArr; HSUSBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
</UL>

<P><STRONG><a name="[f6]"></a>HSUSBD_PrepareCtrlIn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hsusbd.o(.text.HSUSBD_PrepareCtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSUSBD_PrepareCtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_GetDescriptor
</UL>

<P><STRONG><a name="[f7]"></a>HSUSBD_ProcessSetupPacket</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, hsusbd.o(.text.HSUSBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HSUSBD_ProcessSetupPacket &rArr; HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor &rArr; HSUSBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HSUSBD_StandardRequest</STRONG> (Thumb, 1024 bytes, Stack size 32 bytes, hsusbd.o(.text.HSUSBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor &rArr; HSUSBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_GetDescriptor
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_GetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[123]"></a>HSUSBD_SwReset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hsusbd.o(.text.HSUSBD_SwReset))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HSUSBD_UpdateDeviceState</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, hsusbd.o(.text.HSUSBD_UpdateDeviceState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HSUSBD_UpdateDeviceState &rArr; HSUSBD_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetStall
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>I2C_Open</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, i2c.o(.text.I2C_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_low_levle_init
</UL>

<P><STRONG><a name="[102]"></a>I2C_ReadByteOneReg</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, i2c.o(.text.I2C_ReadByteOneReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ReadByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_test
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_readXYZ_mg
</UL>

<P><STRONG><a name="[ff]"></a>I2C_WriteByteOneReg</STRONG> (Thumb, 380 bytes, Stack size 28 bytes, i2c.o(.text.I2C_WriteByteOneReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_WriteByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6500
</UL>

<P><STRONG><a name="[fe]"></a>Init_MPU6500</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mpu6500.o(.text.Init_MPU6500))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_MPU6500 &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_test
</UL>

<P><STRONG><a name="[100]"></a>MPU6500_low_levle_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mpu6500.o(.text.MPU6500_low_levle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MPU6500_low_levle_init &rArr; I2C_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>MPU6500_readXYZ_mg</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, mpu6500.o(.text.MPU6500_readXYZ_mg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MPU6500_readXYZ_mg &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByteOneReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>MPU6500_test</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, mpu6500.o(.text.MPU6500_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MPU6500_test &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByteOneReg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6500
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>PDMA0_IRQHandler</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, audio.o(.text.PDMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PDMA0_IRQHandler &rArr; PDMA_SetTransferMode
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferAddr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetBurstType
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>PDMA_EnableInt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pdma.o(.text.PDMA_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>PDMA_Open</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, pdma.o(.text.PDMA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>PDMA_SetBurstType</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pdma.o(.text.PDMA_SetBurstType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_SetBurstType
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>PDMA_SetTransferAddr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pdma.o(.text.PDMA_SetTransferAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_SetTransferAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>PDMA_SetTransferCnt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pdma.o(.text.PDMA_SetTransferCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>PDMA_SetTransferMode</STRONG> (Thumb, 516 bytes, Stack size 20 bytes, pdma.o(.text.PDMA_SetTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PDMA_SetTransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>ProcessHardFault</STRONG> (Thumb, 734 bytes, Stack size 72 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ProcessHardFault &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>SDH0_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, main.o(.text.SDH0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = SDH0_IRQHandler &rArr; SDH_Probe &rArr; SDH_Init &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>SDH_CardDetection</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, sdh.o(.text.SDH_CardDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDH_CardDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[117]"></a>SDH_CheckRB</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, sdh.o(.text.SDH_CheckRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDH_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
</UL>

<P><STRONG><a name="[10c]"></a>SDH_Get_SD_info</STRONG> (Thumb, 530 bytes, Stack size 56 bytes, sdh.o(.text.SDH_Get_SD_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDH_Get_SD_info &rArr; SDH_SDCmdAndRsp2 &rArr; SDH_Swap32
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRspDataIn
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[111]"></a>SDH_Init</STRONG> (Thumb, 974 bytes, Stack size 56 bytes, sdh.o(.text.SDH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SDH_Init &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[10a]"></a>SDH_Open</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, sdh.o(.text.SDH_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDH_Open &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH0_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>SDH_Probe</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, sdh.o(.text.SDH_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SDH_Probe &rArr; SDH_Init &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_CardDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH0_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>SDH_SDCmdAndRsp</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, sdh.o(.text.SDH_SDCmdAndRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDH_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[10d]"></a>SDH_SDCmdAndRsp2</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, sdh.o(.text.SDH_SDCmdAndRsp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDH_SDCmdAndRsp2 &rArr; SDH_Swap32
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[10f]"></a>SDH_SDCmdAndRspDataIn</STRONG> (Thumb, 318 bytes, Stack size 28 bytes, sdh.o(.text.SDH_SDCmdAndRspDataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDH_SDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SwitchToHighSpeed
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[110]"></a>SDH_SDCommand</STRONG> (Thumb, 180 bytes, Stack size 28 bytes, sdh.o(.text.SDH_SDCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDH_SDCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[115]"></a>SDH_SelectCardType</STRONG> (Thumb, 740 bytes, Stack size 32 bytes, sdh.o(.text.SDH_SelectCardType))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SDH_SelectCardType &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SwitchToHighSpeed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRspDataIn
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[112]"></a>SDH_Set_clock</STRONG> (Thumb, 858 bytes, Stack size 24 bytes, sdh.o(.text.SDH_Set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHXTFreq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
</UL>

<P><STRONG><a name="[116]"></a>SDH_Swap32</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sdh.o(.text.SDH_Swap32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDH_Swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp2
</UL>

<P><STRONG><a name="[118]"></a>SDH_SwitchToHighSpeed</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, sdh.o(.text.SDH_SwitchToHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDH_SwitchToHighSpeed &rArr; SDH_SDCmdAndRspDataIn
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
</UL>

<P><STRONG><a name="[11c]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[11d]"></a>SendChar_ToUART</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, system_m460.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[8a]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, system_m460.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; SYS_UnlockReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[120]"></a>TIMER_Open</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_timer_run
</UL>

<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TMR0_IRQHandler &rArr; MPU6500_readXYZ_mg &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_readXYZ_mg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>UART_Open</STRONG> (Thumb, 708 bytes, Stack size 48 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_port_init
</UL>

<P><STRONG><a name="[4b]"></a>USBD20_IRQHandler</STRONG> (Thumb, 1640 bytes, Stack size 16 bytes, hsusb_mouse.o(.text.USBD20_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD20_IRQHandler &rArr; HSUSBD_ProcessSetupPacket &rArr; HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor &rArr; HSUSBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_UpdateDeviceState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SwReset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ProcessSetupPacket
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_CtrlIn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsusb_endpoint_setup_for_hs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsusb_endpoint_setup_for_fs
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ResetDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>USBD_CtrlIn</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, usbd.o(.text.USBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>USBD_CtrlOut</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbd.o(.text.USBD_CtrlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtrlOut &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>USBD_GetDescriptor</STRONG> (Thumb, 808 bytes, Stack size 40 bytes, usbd.o(.text.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[3f]"></a>USBD_IRQHandler</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, fsusb_mouse.o(.text.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_IRQHandler &rArr; USBD_ProcessSetupPacket &rArr; USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SwReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsusb_ep2_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>USBD_PrepareCtrlIn</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, usbd.o(.text.USBD_PrepareCtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[131]"></a>USBD_PrepareCtrlOut</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbd.o(.text.USBD_PrepareCtrlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_PrepareCtrlOut
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[12e]"></a>USBD_ProcessSetupPacket</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, usbd.o(.text.USBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_ProcessSetupPacket &rArr; USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>USBD_StandardRequest</STRONG> (Thumb, 1294 bytes, Stack size 32 bytes, usbd.o(.text.USBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlOut
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStall
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[12d]"></a>USBD_SwReset</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, usbd.o(.text.USBD_SwReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SwReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, retarget.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d4]"></a>ferror</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(.text.ferror))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[8e]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; MPU6500_test &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_test
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_low_levle_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_timer_run
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_port_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[154]"></a>plat_delay</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(.text.plat_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plat_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>

<P><STRONG><a name="[f4]"></a>synopGMAC0_intr_handler</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, synopgmac_network_interface.o(.text.synopGMAC0_intr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = synopGMAC0_intr_handler &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_take_desc_ownership_tx
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_take_desc_ownership_rx
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_mac_addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_resume_dma_rx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_reset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_init_tx_rx_desc_queue
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_init_tx_desc_base
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_init_rx_desc_base
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_interrupt_type
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_interrupt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_tx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_rx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_dma_control_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_dma_bus_mode_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_interrupt_all
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_dma_tx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_dma_rx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC0_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>synopGMAC_ES_is_IP_header_error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_ES_is_IP_header_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_ES_is_IP_header_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[186]"></a>synopGMAC_ES_is_IP_payload_error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_ES_is_IP_payload_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_ES_is_IP_payload_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[185]"></a>synopGMAC_ES_is_rx_checksum_bypassed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_ES_is_rx_checksum_bypassed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_ES_is_rx_checksum_bypassed
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[155]"></a>synopGMAC_back_off_limit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_back_off_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_back_off_limit &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[157]"></a>synopGMAC_broadcast_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_broadcast_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_broadcast_enable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[159]"></a>synopGMAC_deferral_check_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_deferral_check_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_deferral_check_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[142]"></a>synopGMAC_disable_dma_rx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_disable_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_disable_dma_rx &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[141]"></a>synopGMAC_disable_dma_tx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_disable_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_disable_dma_tx &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[13e]"></a>synopGMAC_disable_interrupt_all</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_disable_interrupt_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = synopGMAC_disable_interrupt_all &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[148]"></a>synopGMAC_dma_bus_mode_init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_dma_bus_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_dma_bus_mode_init &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[149]"></a>synopGMAC_dma_control_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_dma_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = synopGMAC_dma_control_init &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[15a]"></a>synopGMAC_dst_addr_filter_normal</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_dst_addr_filter_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_dst_addr_filter_normal &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[14d]"></a>synopGMAC_enable_dma_rx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_enable_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_enable_dma_rx &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
</UL>

<P><STRONG><a name="[14e]"></a>synopGMAC_enable_dma_tx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_enable_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_enable_dma_tx &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
</UL>

<P><STRONG><a name="[152]"></a>synopGMAC_enable_interrupt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_enable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = synopGMAC_enable_interrupt &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[15b]"></a>synopGMAC_frame_burst_enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_frame_burst_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_frame_burst_enable &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[15d]"></a>synopGMAC_frame_filter_enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_frame_filter_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_frame_filter_enable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[140]"></a>synopGMAC_get_interrupt_type</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_get_interrupt_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_get_interrupt_type &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[182]"></a>synopGMAC_get_rx_desc_frame_length</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, synopgmac_dev.o(.text.synopGMAC_get_rx_desc_frame_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = synopGMAC_get_rx_desc_frame_length
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[15e]"></a>synopGMAC_get_rx_qptr</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, synopgmac_dev.o(.text.synopGMAC_get_rx_qptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_get_rx_qptr &rArr; synopGMAC_is_last_rx_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_last_rx_desc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_desc_owned_by_dma
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_desc_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[18e]"></a>synopGMAC_get_tx_collision_count</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, synopgmac_dev.o(.text.synopGMAC_get_tx_collision_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = synopGMAC_get_tx_collision_count
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
</UL>

<P><STRONG><a name="[162]"></a>synopGMAC_get_tx_qptr</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, synopgmac_dev.o(.text.synopGMAC_get_tx_qptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_get_tx_qptr &rArr; synopGMAC_tx_desc_init_ring
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_desc_init_ring
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_last_tx_desc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_desc_owned_by_dma
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_desc_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
</UL>

<P><STRONG><a name="[14a]"></a>synopGMAC_init_rx_desc_base</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_init_rx_desc_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = synopGMAC_init_rx_desc_base &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[14b]"></a>synopGMAC_init_tx_desc_base</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_init_tx_desc_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = synopGMAC_init_tx_desc_base &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[145]"></a>synopGMAC_init_tx_rx_desc_queue</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_init_tx_rx_desc_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = synopGMAC_init_tx_rx_desc_queue &rArr; synopGMAC_tx_desc_init_ring
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_desc_init_ring
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_desc_init_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[160]"></a>synopGMAC_is_desc_empty</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_is_desc_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_is_desc_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_tx_qptr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_rx_qptr
</UL>

<P><STRONG><a name="[15f]"></a>synopGMAC_is_desc_owned_by_dma</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, synopgmac_dev.o(.text.synopGMAC_is_desc_owned_by_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = synopGMAC_is_desc_owned_by_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_tx_qptr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_rx_qptr
</UL>

<P><STRONG><a name="[18b]"></a>synopGMAC_is_desc_valid</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, synopgmac_dev.o(.text.synopGMAC_is_desc_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = synopGMAC_is_desc_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
</UL>

<P><STRONG><a name="[183]"></a>synopGMAC_is_ext_status</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_is_ext_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_is_ext_status
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[161]"></a>synopGMAC_is_last_rx_desc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_is_last_rx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_is_last_rx_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_rx_qptr
</UL>

<P><STRONG><a name="[163]"></a>synopGMAC_is_last_tx_desc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_is_last_tx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_is_last_tx_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_tx_qptr
</UL>

<P><STRONG><a name="[166]"></a>synopGMAC_is_magic_packet_received</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_is_magic_packet_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = synopGMAC_is_magic_packet_received &rArr; synopGMACReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
</UL>

<P><STRONG><a name="[187]"></a>synopGMAC_is_rx_checksum_error</STRONG> (Thumb, 298 bytes, Stack size 12 bytes, synopgmac_dev.o(.text.synopGMAC_is_rx_checksum_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = synopGMAC_is_rx_checksum_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_received_data
</UL>

<P><STRONG><a name="[18c]"></a>synopGMAC_is_tx_aborted</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, synopgmac_dev.o(.text.synopGMAC_is_tx_aborted))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = synopGMAC_is_tx_aborted
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
</UL>

<P><STRONG><a name="[18d]"></a>synopGMAC_is_tx_carrier_error</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, synopgmac_dev.o(.text.synopGMAC_is_tx_carrier_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = synopGMAC_is_tx_carrier_error
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
</UL>

<P><STRONG><a name="[189]"></a>synopGMAC_is_tx_ipv4header_checksum_error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_is_tx_ipv4header_checksum_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_is_tx_ipv4header_checksum_error
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
</UL>

<P><STRONG><a name="[18a]"></a>synopGMAC_is_tx_payload_checksum_error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_is_tx_payload_checksum_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_is_tx_payload_checksum_error
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synop_handle_transmit_over
</UL>

<P><STRONG><a name="[167]"></a>synopGMAC_is_wakeup_frame_received</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_is_wakeup_frame_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = synopGMAC_is_wakeup_frame_received &rArr; synopGMACReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
</UL>

<P><STRONG><a name="[168]"></a>synopGMAC_jab_enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_jab_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_jab_enable &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[169]"></a>synopGMAC_jumbo_frame_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_jumbo_frame_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_jumbo_frame_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[16a]"></a>synopGMAC_loopback_off</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_loopback_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_loopback_off &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[14c]"></a>synopGMAC_mac_init</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_mac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = synopGMAC_mac_init &rArr; synopGMAC_set_pass_control &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_wd_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_unicast_pause_frame_detect_disable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_unicast_hash_filter_disable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_flow_control_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_flow_control_disable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_src_addr_filter_disable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_pass_control
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_half_duplex
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_full_duplex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_select_mii
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_select_gmii
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_own_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_flow_control_enable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_flow_control_disable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_enable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_retry_enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_promisc_disable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_pad_crc_strip_disable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_multicast_hash_filter_disable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_multicast_disable
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_loopback_off
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_jumbo_frame_disable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_jab_enable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_frame_filter_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_frame_burst_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_dst_addr_filter_normal
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_deferral_check_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_broadcast_enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_back_off_limit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[176]"></a>synopGMAC_multicast_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_multicast_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_multicast_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[177]"></a>synopGMAC_multicast_hash_filter_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_multicast_hash_filter_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_multicast_hash_filter_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[16f]"></a>synopGMAC_pad_crc_strip_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_pad_crc_strip_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_pad_crc_strip_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[180]"></a>synopGMAC_pmt_int_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_pmt_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_pmt_int_disable &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
</UL>

<P><STRONG><a name="[178]"></a>synopGMAC_promisc_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_promisc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_promisc_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[146]"></a>synopGMAC_reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = synopGMAC_reset &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_delay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[150]"></a>synopGMAC_resume_dma_rx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_resume_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = synopGMAC_resume_dma_rx &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[16e]"></a>synopGMAC_retry_enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_retry_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_retry_enable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[165]"></a>synopGMAC_rx_desc_init_ring</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_rx_desc_init_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_rx_desc_init_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_init_tx_rx_desc_queue
</UL>

<P><STRONG><a name="[173]"></a>synopGMAC_rx_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_rx_enable &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
</UL>

<P><STRONG><a name="[17e]"></a>synopGMAC_rx_flow_control_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_rx_flow_control_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_rx_flow_control_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[17b]"></a>synopGMAC_rx_flow_control_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_rx_flow_control_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_rx_flow_control_enable &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[16c]"></a>synopGMAC_rx_own_enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_rx_own_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_rx_own_enable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[170]"></a>synopGMAC_select_gmii</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_select_gmii))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_select_gmii &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[171]"></a>synopGMAC_select_mii</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_select_mii))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_select_mii &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[16d]"></a>synopGMAC_set_full_duplex</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_set_full_duplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_set_full_duplex &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[17d]"></a>synopGMAC_set_half_duplex</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_set_half_duplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_set_half_duplex &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[147]"></a>synopGMAC_set_mac_addr</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, synopgmac_dev.o(.text.synopGMAC_set_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = synopGMAC_set_mac_addr &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[174]"></a>synopGMAC_set_pass_control</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_set_pass_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = synopGMAC_set_pass_control &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACWriteReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[175]"></a>synopGMAC_src_addr_filter_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_src_addr_filter_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_src_addr_filter_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[181]"></a>synopGMAC_take_desc_ownership</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, synopgmac_dev.o(.text.synopGMAC_take_desc_ownership))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = synopGMAC_take_desc_ownership
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_take_desc_ownership_tx
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_take_desc_ownership_rx
</UL>

<P><STRONG><a name="[144]"></a>synopGMAC_take_desc_ownership_rx</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_take_desc_ownership_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = synopGMAC_take_desc_ownership_rx &rArr; synopGMAC_take_desc_ownership
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_take_desc_ownership
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[143]"></a>synopGMAC_take_desc_ownership_tx</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMAC_take_desc_ownership_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = synopGMAC_take_desc_ownership_tx &rArr; synopGMAC_take_desc_ownership
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_take_desc_ownership
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[164]"></a>synopGMAC_tx_desc_init_ring</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, synopgmac_dev.o(.text.synopGMAC_tx_desc_init_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = synopGMAC_tx_desc_init_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_init_tx_rx_desc_queue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_tx_qptr
</UL>

<P><STRONG><a name="[172]"></a>synopGMAC_tx_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_tx_enable &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_powerup_mac
</UL>

<P><STRONG><a name="[17f]"></a>synopGMAC_tx_flow_control_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_tx_flow_control_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_tx_flow_control_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[17c]"></a>synopGMAC_tx_flow_control_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_tx_flow_control_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_tx_flow_control_enable &rArr; synopGMACSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[179]"></a>synopGMAC_unicast_hash_filter_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_unicast_hash_filter_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_unicast_hash_filter_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[17a]"></a>synopGMAC_unicast_pause_frame_detect_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_unicast_pause_frame_detect_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_unicast_pause_frame_detect_disable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[16b]"></a>synopGMAC_wd_enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMAC_wd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = synopGMAC_wd_enable &rArr; synopGMACClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
</UL>

<P><STRONG><a name="[14f]"></a>synop_handle_received_data</STRONG> (Thumb, 492 bytes, Stack size 72 bytes, synopgmac_network_interface.o(.text.synop_handle_received_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = synop_handle_received_data &rArr; synopGMAC_get_rx_qptr &rArr; synopGMAC_is_last_rx_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_rx_checksum_error
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_ext_status
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_rx_qptr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_rx_desc_frame_length
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_ES_is_rx_checksum_bypassed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_ES_is_IP_payload_error
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_ES_is_IP_header_error
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[151]"></a>synop_handle_transmit_over</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, synopgmac_network_interface.o(.text.synop_handle_transmit_over))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = synop_handle_transmit_over &rArr; synopGMAC_get_tx_qptr &rArr; synopGMAC_tx_desc_init_ring
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_tx_payload_checksum_error
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_tx_ipv4header_checksum_error
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_tx_carrier_error
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_tx_aborted
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_desc_valid
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_tx_qptr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_tx_collision_count
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[df]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[195]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[194]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[196]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[197]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e0]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e1]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[198]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[da]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[b7]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1cb]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1cc]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[99]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[9d]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11e]"></a>SYS_UnlockReg</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, system_m460.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4d]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m460.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>USBD_GetStall</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbd.o(.text.USBD_GetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[129]"></a>USBD_MemCopy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd.o(.text.USBD_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
</UL>

<P><STRONG><a name="[133]"></a>USBD_SetStall</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd.o(.text.USBD_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[fc]"></a>HSUSBD_ClearStall</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hsusbd.o(.text.HSUSBD_ClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSUSBD_ClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_UpdateDeviceState
</UL>

<P><STRONG><a name="[f9]"></a>HSUSBD_GetStall</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, hsusbd.o(.text.HSUSBD_GetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_GetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
</UL>

<P><STRONG><a name="[fb]"></a>HSUSBD_SetStall</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, hsusbd.o(.text.HSUSBD_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSUSBD_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_UpdateDeviceState
</UL>

<P><STRONG><a name="[119]"></a>SYS_UnlockReg</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, sdh.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
</UL>

<P><STRONG><a name="[113]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, sdh.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Open
</UL>

<P><STRONG><a name="[193]"></a>CLK_SysTickDelay</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, main.o(.text.CLK_SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[18f]"></a>SYS_UnlockReg</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[121]"></a>TIMER_ClearIntFlag</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.TIMER_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>TIMER_EnableInt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.TIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_timer_run
</UL>

<P><STRONG><a name="[13a]"></a>TIMER_Start</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_timer_run
</UL>

<P><STRONG><a name="[139]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, main.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_timer_run
</UL>

<P><STRONG><a name="[134]"></a>debug_port_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text.debug_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = debug_port_init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>imu_timer_run</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text.imu_timer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = imu_timer_run &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>sys_init</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, main.o(.text.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sys_init &rArr; CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>fsusb_ep2_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsusb_mouse.o(.text.fsusb_ep2_handler))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>HSUSBD_ConfigEp</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hsusb_mouse.o(.text.HSUSBD_ConfigEp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsusb_endpoint_setup_for_hs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsusb_endpoint_setup_for_fs
</UL>

<P><STRONG><a name="[124]"></a>HSUSBD_ResetDMA</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hsusb_mouse.o(.text.HSUSBD_ResetDMA))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HSUSBD_SetEpBufAddr</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, hsusb_mouse.o(.text.HSUSBD_SetEpBufAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_SetEpBufAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsusb_endpoint_setup_for_hs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsusb_endpoint_setup_for_fs
</UL>

<P><STRONG><a name="[126]"></a>hsusb_endpoint_setup_for_fs</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hsusb_mouse.o(.text.hsusb_endpoint_setup_for_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hsusb_endpoint_setup_for_fs &rArr; HSUSBD_ConfigEp
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpBufAddr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>hsusb_endpoint_setup_for_hs</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hsusb_mouse.o(.text.hsusb_endpoint_setup_for_hs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hsusb_endpoint_setup_for_hs &rArr; HSUSBD_ConfigEp
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpBufAddr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>synopGMACClearBits</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, synopgmac_dev.o(.text.synopGMACClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = synopGMACClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_wd_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_unicast_pause_frame_detect_disable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_unicast_hash_filter_disable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_flow_control_disable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_src_addr_filter_disable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_half_duplex
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_select_gmii
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_own_enable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_flow_control_disable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_retry_enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_promisc_disable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_pad_crc_strip_disable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_multicast_hash_filter_disable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_multicast_disable
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_loopback_off
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_jumbo_frame_disable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_frame_filter_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_dst_addr_filter_normal
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_deferral_check_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_broadcast_enable
</UL>

<P><STRONG><a name="[156]"></a>synopGMACReadReg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, synopgmac_dev.o(.text.synopGMACReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_pass_control
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_reset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_wakeup_frame_received
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_magic_packet_received
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_interrupt_type
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_tx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_rx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_dma_tx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_dma_rx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_back_off_limit
</UL>

<P><STRONG><a name="[15c]"></a>synopGMACSetBits</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, synopgmac_dev.o(.text.synopGMACSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = synopGMACSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_flow_control_enable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_full_duplex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_select_mii
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_flow_control_enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_enable
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_pmt_int_disable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_jab_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_frame_burst_enable
</UL>

<P><STRONG><a name="[153]"></a>synopGMACWriteReg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, synopgmac_dev.o(.text.synopGMACWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_pass_control
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_set_mac_addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_resume_dma_rx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_reset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_mac_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_init_tx_desc_base
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_init_rx_desc_base
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_get_interrupt_type
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_interrupt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_tx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_rx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_dma_control_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_dma_bus_mode_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_interrupt_all
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_dma_tx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_disable_dma_rx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_back_off_limit
</UL>

<P><STRONG><a name="[13c]"></a>synopGMACReadReg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, synopgmac_network_interface.o(.text.synopGMACReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = synopGMACReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[13d]"></a>synopGMACWriteReg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, synopgmac_network_interface.o(.text.synopGMACWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[13f]"></a>synopGMAC_powerup_mac</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, synopgmac_network_interface.o(.text.synopGMAC_powerup_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = synopGMAC_powerup_mac &rArr; synopGMAC_enable_dma_tx &rArr; synopGMACWriteReg &rArr; plat_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_tx_enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_rx_enable
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_pmt_int_disable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_wakeup_frame_received
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_is_magic_packet_received
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_tx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC_enable_dma_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synopGMAC0_intr_handler
</UL>

<P><STRONG><a name="[8d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
